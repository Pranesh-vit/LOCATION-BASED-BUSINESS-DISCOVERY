# -*- coding: utf-8 -*-
"""LOCATION BASED BUSINESS RECOMMENDATIONS

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XDGCrx9_pNtuu6Qxv9hiGRYv-kGEy-3A
"""

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from geopy.geocoders import Nominatim

def load_data(file_path):
    file_path = 'tamil_nadu_businesses.csv'
    df = pd.read_csv(file_path)
    return df

def get_coordinates(location_name):
    """Convert a location name to latitude and longitude using Geopy."""
    geolocator = Nominatim(user_agent="business_recommender")
    location = geolocator.geocode(location_name)
    if location:
        return location.latitude, location.longitude
    else:
        print("Location not found. Please try again.")
        return None, None

def find_businesses_in_area(df, location_name):
    """Find businesses that are registered in the given area."""
    businesses = df[df['Address'].str.contains(location_name, case=False, na=False)]
    return businesses[['Business_Name', 'Category', 'Address', 'Ratings']]

def train_recommendation_model(df):
    """Train a Random Forest model to recommend businesses based on location data."""
    features = ['Latitude', 'Longitude', 'Ratings', 'Reviews', 'Price_INR']
    label = 'Category'

    le = LabelEncoder()
    df[label] = le.fit_transform(df[label])
    category_mapping = dict(zip(le.transform(le.classes_), le.classes_))

    X = df[features]
    y = df[label]

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)

    return model, le, category_mapping

def recommend_business(model, le, latitude, longitude, ratings, reviews, price):
    """Predict and recommend a business category based on location and other parameters."""
    user_input = [[latitude, longitude, ratings, reviews, price]]
    predicted_category = model.predict(user_input)
    category_name = le.inverse_transform(predicted_category)
    return category_name[0]

def suggest_profitable_business(df, location_name, category):
    """Analyze the area and suggest why the recommended business is profitable there."""
    total_businesses = len(df[df['Category'] == category])
    avg_rating = df[df['Category'] == category]['Ratings'].mean()
    avg_price = df[df['Category'] == category]['Price_INR'].mean()

    if total_businesses == 0:
        message = f"Currently, there are very few businesses in the {category} category in {location_name}, indicating high demand with low competition."
    else:
        message = (f"{location_name} has {total_businesses} businesses in the {category} category.\n"
                   f"The average rating is {avg_rating:.2f}, and the average price is INR {avg_price:.2f}.\n"
                   "This suggests potential growth opportunities for new businesses in this sector!")

    return message

def suggest_novel_business(df, location_name):
    """Suggest business categories with low competition in the given location."""
    category_counts = df['Category'].value_counts()
    low_competition_categories = category_counts[category_counts < category_counts.median()].index.tolist()

    # No need for LabelEncoder transformation here
    # Instead, directly use the category names from low_competition_categories

    suggestion = (f"In {location_name}, the following business categories have low competition and could be profitable:\n"
                 + "\n".join(map(str, low_competition_categories)) +
                 "\nConsider investing in these areas for a unique market opportunity!")

    return suggestion

# Example Usage
file_path = '/mnt/data/tamil_nadu_businesses.csv'
df = load_data(file_path)
df_original=df.copy()# Create a copy of the dataframe

# Get user input
location_name = input("Enter your location (city or area name): ")
businesses_in_area = find_businesses_in_area(df, location_name)
print("Businesses in", location_name, ":\n", businesses_in_area)

latitude, longitude = get_coordinates(location_name)
if latitude is None or longitude is None:
    exit()

ratings = float(input("Enter preferred minimum rating (0-5): "))
reviews = int(input("Enter minimum number of reviews: "))
price = int(input("Enter price range (INR): "))

# Train and test recommendation model
model, le, category_mapping = train_recommendation_model(df)
recommended_category = recommend_business(model, le, latitude, longitude, ratings, reviews, price)
print("Recommended Business Category:", recommended_category)

# Provide business opportunity insights
business_suggestion = suggest_profitable_business(df, location_name, recommended_category)
print(business_suggestion)

novel_business_suggestion = suggest_novel_business(df_original, location_name) # Remove the extra argument 'le'
print(novel_business_suggestion)